package com.officina_hide.base.model;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.util.Properties;

import com.officina_hide.base.common.FD_EnvData;
import com.officina_hide.base.common.FD_ItemCollection;

/**
 * テーブル情報[Table information class]<br>
 * <p>テーブル情報は基盤情報の一つで、非標準の方法で生成されます。</p>
 * <p>Table information is one of the basic information and is generated by the non-standard package method.</p>
 * @author officina-hide.com
 * @version 1.00
 * @since 2021/04/05
 */
public class FD_Table implements I_FD_DB {

	/** 環境情報 */
	private FD_EnvData env;
	/** 
	 * TODO Connection汎用化時に除去
	 * データベース接続情報
	 */
	protected static Connection conn;
	
	/**
	 * コンストラクター<br>
	 * 環境情報の保存[Ensure environmental information]<br>
	 * @param env 環境情報
	 */
	public FD_Table(FD_EnvData env) {
		this.env = env;
		/** 項目リスト作成 */
		FD_ItemCollection itemList = createItemList();
	}

	/**
	 * テーブル項目リスト生成[Table item list generation]<br>
	 * @author officine-hide.com
	 * @since 1.00 2021/04/23
	 * @return テーブル項目リスト[Table item list]
	 */
	private FD_ItemCollection createItemList() {
		FD_ItemCollection itemList = new FD_ItemCollection();
		itemList.add(I_FD_Table.COLUMNNAME_FD_Table_ID, null, I_FD_DB.Item_Value_Type_ID);
		return itemList;
	}

	/**
	 * テーブル情報生成[Table information generation]<br>
	 */
	public void createTable() {
		/*
		 * テーブル情報が生成済みかどうかをチェックする。<br>
		 * 未生成の時は、外部の生成用SQL文を読み込み、テーブル生成と情報の書き込みを行う。<br>
		 * Check if the table information has been generated.<br>
		 * When it is not generated, the external SQL statement is read, the table is generated and the information is written.<br>
		 */
		if(exitTable(I_FD_Table.Table_Name) == false || env.getRunLevel() == 0) {
			System.out.println("FD_Table not created!");
			dropTable(I_FD_Table.Table_Name);
			create();
			fileDataImport("Insert_"+I_FD_Table.Table_Name+".dat");
		}
	}

	/**
	 * ファイルからデータを挿入する。[Insert data from a file.]<br>
	 * @author officine-hide.com
	 * @since 1.00 2021/04/19
	 * @param dataFileName 挿入ファイル[Insert data file]
	 */
	private void fileDataImport(String dataFileName) {
		try {
			File currentdir = new File("."+"/document/install/");
			File dataFile = new File(currentdir.getAbsolutePath() + "\\" + dataFileName);
			FileInputStream fs = new FileInputStream(dataFile);
			Properties prop = new Properties();
			prop.load(fs);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * テーブル生成[Table generation]<br>
	 * @author officina-hide.com
	 * @since 1.00 2021/04/17
	 */
	private void create() {
		String sql = getSQLParameter("Create_"+I_FD_Table.Table_Name);
		try {
			connection(env);
			Statement stmt = conn.createStatement();
			stmt.execute(sql);
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	/**
	 * テーブル削除[Drop of Table]<br>
	 * @author officina-hide.com
	 * @since 1.00 2021/04/16
	 * @param tableName テーブル名[name of Table]
	 */
	private void dropTable(String tableName) {
		String sql = getSQLParameter("drop");
		try {
			sql = sql.replaceAll("\\?", tableName);
			connection(env);
			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.execute();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	/**
	 * SQLテンプレート取得[Get SQL template]<br>
	 * 指定された名称を持つSQLテンプレートを取得する。<br>
	 * Gets the SQL template with the specified name.<br>
	 * @author officine-hide.com
	 * @since 1.00 2021/04/12
	 * @param paramName パラメータ名[Parameter name]
	 * @return SQLテンプレート文[SQL template string]
	 */
	private String getSQLParameter(String paramName) {
		File currentdir = new File("."+"/document/SQL/Template/");
		File sqlFile = new File(currentdir.getAbsolutePath() + "\\" + paramName + ".sql");
		BufferedReader reader = null;
		StringBuffer sql = new StringBuffer();
		try {
			reader = new BufferedReader(new FileReader(sqlFile));
			while(reader.ready()) {
				sql.append(reader.readLine()).append(System.lineSeparator());
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				reader.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return sql.toString();
	}

	/**
	 * TODO 汎用化予定
	 * テーブル存在確認[Check for the existence of the table.]<br>
	 * @param tableName テーブル名
	 * @return true - 存在する、false - 存在しない。<br>
	 *  true - exists, false - not exists
	 */
	private boolean exitTable(String tableName) {
		boolean chk = false;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		connection(env);
		StringBuffer sql = new StringBuffer();
		try {
			sql.append("SELECT * FROM information_schema.tables WHERE table_name = ?");
			stmt = conn.prepareStatement(sql.toString());
			stmt.setString(1, tableName);
			rs = stmt.executeQuery();
			if(rs.next()) {
				chk = true;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return chk;
	}

	/**
	 * TODO 汎用化予定
	 * データベース接続[Database Connection]<br>
	 * @param env 環境情報[Environment Information]
	 */
	private void connection(FD_EnvData env) {
		if(conn == null) {
			try {
				Class.forName("com.mysql.cj.jdbc.Driver");
				StringBuffer url  = new StringBuffer().append("jdbc:mysql://www.officina-hide.com:3306/FDBASE");
				conn = DriverManager.getConnection(url.toString(), "fdadmin", "fdadminqAz*01");
				System.out.println(new Date() + " : "+"Database Connected.");
			} catch (ClassNotFoundException | SQLException e) {
				e.printStackTrace();
			}
		}
	}
	
}