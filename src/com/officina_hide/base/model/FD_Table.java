package com.officina_hide.base.model;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.util.Properties;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.officina_hide.base.common.FD_EnvData;
import com.officina_hide.base.common.FD_ItemCollection;
import com.officina_hide.base.common.FD_Items;
import com.officina_hide.base.sql.FD_sql;

/**
 * テーブル情報[Table information class]<br>
 * <p>テーブル情報は基盤情報の一つで、非標準の方法で生成されます。</p>
 * <p>Table information is one of the basic information and is generated by the non-standard package method.</p>
 * @author officina-hide.com
 * @version 1.00
 * @since 2021/04/05
 */
public class FD_Table implements I_FD_DB {

	/** 環境情報 */
	private FD_EnvData env;
	private FD_ItemCollection itemList;
	/** SQLクラス */
	FD_sql sq = new FD_sql();
	/** 
	 * TODO Connection汎用化時に除去
	 * データベース接続情報
	 */
	protected static Connection conn;
	
	/**
	 * コンストラクター<br>
	 * 環境情報の保存[Ensure environmental information]<br>
	 * @param env 環境情報
	 */
	public FD_Table(FD_EnvData env) {
		this.env = env;
		/** 項目リスト作成 */
		itemList = createItemList();
	}

	/**
	 * コンストラクター[Constructor]<br>
	 * 環境情報の保存[Ensure environmental information]<br>
	 * XML情報からテーブル情報をセットする。<br>
	 * Set table information from XML information.<br>
	 * @author officina-hide.com
	 * @since 1.00 2021/05/06
	 * @param env 環境情報[Environment Information]
	 * @param xmlData XML情報[XML Information]
	 */
	public FD_Table(FD_EnvData env, Element xmlData) {
		//環境情報保存[Storage of environmental information]
		this.env = env;
		//XML情報読み取り
		System.out.println(xmlData.getAttribute(COLUMN_NAME));
	}

	/**
	 * テーブル項目リスト生成[Table item list generation]<br>
	 * @author officine-hide.com
	 * @since 1.00 2021/04/23
	 * @return テーブル項目リスト[Table item list]
	 */
	private FD_ItemCollection createItemList() {
		FD_ItemCollection itemList = new FD_ItemCollection();
		itemList.add(I_FD_Table.COLUMNNAME_FD_Table_ID, null, I_FD_DB.Item_Value_Type_ID);
		itemList.add(I_FD_Table.COLUMNNAME_FD_Table_Name, null, I_FD_DB.Item_Value_Type_String);
		return itemList;
	}

	/**
	 * テーブル情報生成[Table information generation]<br>
	 * <p>本メソッドが呼び出された時は、XML情報よりテーブル生成と情報登録を行う。</p>
	 * <p>When this method is called, table generation and information registration are performed from XML information.</p>
	 * @author officina-hide.com
	 * @since 2021/04/05
	 */
	public void createTable() {
		Statement stmt = null;
		try {
			File currentdir = new File("."+"/document/install/");	// TODO 環境変数化
			File xmlFile = new File(currentdir.getAbsolutePath() + "\\FD_Table.xml");	// TODO 環境変数化
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			Document document = builder.parse(xmlFile);
			Element xmlData = document.getDocumentElement();
			connection(env);
			stmt = conn.createStatement();
			// TODO 生成に関するメッセージが必要(2020/05/01)
			//テーブル項目情報から項目リストを作成する。
//			FD_Items items = new FD_Items(xmlData);
			//XML情報からテーブル情報を取得する。
//			X_FD_Table table = new X_FD_Table(env, xmlData);
			
			
//			//既登録分の削除用SQL文を生成する生成する。
//			String sql = sq.createSqlStatement(env, FD_sql.DELETE_TABLE, xmlData);
//			stmt.addBatch(sql);
//			//生成用SQL文を作成する。
//			sql = sq.createSqlStatement(env, FD_sql.CREATE_TABLE, xmlData);
//			stmt.addBatch(sql);
//			stmt.executeBatch();
//			//テーブル情報登録
////			NodeList entry = xmlData.getElementsByTagName("entry");
////			NodeList datas = ((Element) entry.item(0)).getElementsByTagName("data");
////			Element data = (Element) datas.item(0);
//			sql = createEntrySQL(xmlData);
			
		} catch (ParserConfigurationException | SAXException | IOException | SQLException e) {
			e.printStackTrace();
		}
	}

	/**
	 * テーブル情報登録用SQL文生成[SQL statement generation for table information registration]<br>
	 * @author officina-hide.com
	 * @since 1.00 2021/05/02
	 * @param xmlData[XML Information]
	 * @param sql SQLステートメント[SQL Statement]
	 */
	private String createEntrySQL(Element xmlData) {
		StringBuffer sql = new StringBuffer();
		StringBuffer sqlItem = new StringBuffer();
		NamedNodeMap data = xmlData.getAttributes();
		for(int ix =0; ix < data.getLength(); ix++) {
			System.out.println(data.item(ix).getNodeName()+":"+data.item(ix).getNodeValue());
			if(data.item(ix).getNodeName().equals("table")) {
				sql.append("INSERT INTO ").append(data.item(ix).getNodeValue()).append(" SET ");
			} else {
				sqlItem.append(data.item(ix).getNodeName()).append(" = ").append(data.item(ix).getNodeValue()).append(" ");
			}
		}
		return null;
	}

	/**
	 * ファイルからデータを挿入する。[Insert data from a file.]<br>
	 * @author officine-hide.com
	 * @since 1.00 2021/04/19
	 * @param dataFileName 挿入ファイル[Insert data file]
	 */
	private void fileDataImport(String dataFileName) {
		try {
			File currentdir = new File("."+"/document/install/");
			File dataFile = new File(currentdir.getAbsolutePath() + "\\" + dataFileName);
			FileInputStream fs = new FileInputStream(dataFile);
			Properties prop = new Properties();
			prop.load(fs);
			//テーブル項目リストからデータの各項目情報をセットする。
			
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * TODO 汎用化予定
	 * テーブル存在確認[Check for the existence of the table.]<br>
	 * @param tableName テーブル名
	 * @return true - 存在する、false - 存在しない。<br>
	 *  true - exists, false - not exists
	 */
	private boolean exitTable(String tableName) {
		boolean chk = false;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		connection(env);
		StringBuffer sql = new StringBuffer();
		try {
			sql.append("SELECT * FROM information_schema.tables WHERE table_name = ?");
			stmt = conn.prepareStatement(sql.toString());
			stmt.setString(1, tableName);
			rs = stmt.executeQuery();
			if(rs.next()) {
				chk = true;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return chk;
	}

	/**
	 * TODO 汎用化予定
	 * データベース接続[Database Connection]<br>
	 * @param env 環境情報[Environment Information]
	 */
	private void connection(FD_EnvData env) {
		if(conn == null) {
			try {
				Class.forName("com.mysql.cj.jdbc.Driver");
//				StringBuffer url  = new StringBuffer().append("jdbc:mysql://www.officina-hide.com:3306/FDBASE");
				StringBuffer url  = new StringBuffer().append("jdbc:mysql://192.168.0.14:3306/FDBASE");
				conn = DriverManager.getConnection(url.toString(), "fdadmin", "fdadminAz*01");
				System.out.println(new Date() + " : "+"Database Connected.");
			} catch (ClassNotFoundException | SQLException e) {
				e.printStackTrace();
			}
		}
	}	
}